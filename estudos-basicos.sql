-- Active: 1657234173046@@127.0.0.1@3306@stream
CREATE DATABASE STAART;

USE STAART;

CREATE SCHEMA STREAM;

CREATE TABLE MANTIMENTO(
	NOME VARCHAR(200),
	DATA_DE_VALIDADE DATE
);

CREATE TABLE STREAM.ELETRONICOS(
	NOME VARCHAR(200),
	DESCRICAO VARCHAR(200)
);

CREATE TABLE STREAM.USERS( -- Tabela de usuários.
	ID_USER INT PRIMARY KEY,
    NAME VARCHAR(255),
    USERNAME VARCHAR(255),
    PASSWORD VARCHAR(100),
    CREATED_AT DATETIME
);

CREATE TABLE STREAM.CATEGORIES( -- Categoria de produtos.
	ID_CATEGORY INT AUTO_INCREMENT PRIMARY KEY, -- ID da categoria.
	NAME VARCHAR(255) UNIQUE NOT NULL -- Nome da categoria.
);

INSERT INTO STREAM.CATEGORIES(NAME) VALUES("COMEDIA"); -- Adciona nova categoria.

-- SELECT
SELECT *
FROM STREAM.CATEGORIES
WHERE ID_CATEGORY > 1;

INSERT INTO STREAM.USERS(ID_USER, NAME, USERNAME, PASSWORD, CREATED_AT) -- Adicionando um usuário.
VALUES(3, "DANIEL", "DAN", NULL, CURRENT_DATE());

SELECT *
FROM STREAM.USERS;

-- UPDATE
UPDATE STREAM.USERS
SET PASSWORD = "5678" -- Atualiza a senha do usuário.
WHERE ID_USER = 2; -- Atualiza o usuário com o ID 2.

-- DELETE
DELETE 
FROM STREAM.CATEGORIES 
WHERE ID_CATEGORY = 4;

-- ALTER TABLE
ALTER TABLE STREAM.USERS -- Alterar o nome do campo.
ADD CONSTRAINT NAME_UNIQUE UNIQUE (NAME); -- Nome deve ser único.

-- IN
SELECT * FROM STREAM.CATEGORIES
WHERE ID_CATEGORY IN (1, 3, 6);

-- BETWEEN
SELECT * FROM STREAM.CATEGORIES
WHERE ID_CATEGORY BETWEEN 3 AND 6;

-- != <>
SELECT * FROM STREAM.CATEGORIES
WHERE ID_CATEGORY != 3;

-- IS NULL / IS NOT NULL
SELECT * FROM STREAM.USERS
WHERE PASSWORD IS NULL;

SELECT * FROM STREAM.USERS
WHERE PASSWORD IS NOT NULL;

-- LIKE
SELECT * FROM STREAM.USERS
WHERE USERNAME LIKE 'DAN%'; -- Busca usuários com o nome que contenha DAN | O uso do '%' é para expecificar se começa/termina ou contenha em qualquer parte o valor buscado.

-- > <
SELECT * FROM STREAM.USERS
WHERE ID_USER < 4;

CREATE TABLE STREAM.PROFILE( -- Tabela de perfil.
	ID_PROFILE INT AUTO_INCREMENT PRIMARY KEY, 
	ID_USER_PROFILE INT,
	BIO VARCHAR(300) DEFAULT "MINHA BIO",
	AVATAR_URL VARCHAR(200),
	FOREIGN KEY (ID_USER_PROFILE) REFERENCES STREAM.USERS(ID_USER) -- Chave estrangeira.
);

SELECT * FROM STREAM.PROFILE;

INSERT INTO STREAM.PROFILE(ID_USER_PROFILE, AVATAR_URL) VALUES(2, "http://www.google.com.br/avatar_coca.jpg");

-- Removendo a FK para adicionar a constraint UNIQUE.
DELETE FROM STREAM.PROFILE WHERE ID_USER_PROFILE = 2;

ALTER TABLE STREAM.PROFILE DROP FOREIGN KEY profile_ibfk_1;

ALTER TABLE STREAM.PROFILE
ADD CONSTRAINT FOREIGN KEY (ID_USER_PROFILE) REFERENCES STREAM.USERS(ID_USER),
ADD CONSTRAINT UNIQUE (ID_USER_PROFILE);

CREATE TABLE STREAM.CONTENT (
	ID_CONTENT INT AUTO_INCREMENT PRIMARY KEY,
	NAME VARCHAR(300),
	ID_CATEGORY INT,
	DURATION TIME,
	FOREIGN KEY (ID_CATEGORY) REFERENCES STREAM.CATEGORIES(ID_CATEGORY)
); 

INSERT INTO STREAM.content(NAME, ID_CATEGORY, DURATION) 
VALUES("O REI LEÃO", 5, "02:00:00");

INSERT INTO STREAM.content(NAME, ID_CATEGORY, DURATION) 
VALUES("MEGAMENTE", 5, "02:30:00");

CREATE TABLE STREAM.USERS_CONTENTS(
	ID INT AUTO_INCREMENT PRIMARY KEY,
	ID_USER INT,
	ID_CONTENT INT,
	TIME_STOPPED TIME,
	NOTE INT,
	FOREIGN KEY (ID_USER) REFERENCES STREAM.USERS(ID_USER),
	FOREIGN KEY (ID_CONTENT) REFERENCES STREAM.CONTENT(ID_CONTENT)
);

INSERT INTO STREAM.USERS_CONTENTS(ID_USER, ID_CONTENT, TIME_STOPPED, NOTE) 
VALUES(2, 1, "00:50:00", 10);

INSERT INTO STREAM.USERS_CONTENTS(ID_USER, ID_CONTENT, TIME_STOPPED, NOTE) 
VALUES(3, 3, "01:40:00", 10);

-- SQL JOIN

-- INNER JOIN
SELECT * FROM STREAM.USERS_CONTENTS
INNER JOIN STREAM.USERS
ON STREAM.USERS_CONTENTS.ID_USER = STREAM.USERS.ID_USER; -- Faz o join entre as tabelas.

-- LEFT JOIN
SELECT * FROM STREAM.USERS
LEFT JOIN STREAM.USERS_CONTENTS
ON STREAM.USERS.ID_USER = STREAM.USERS_CONTENTS.ID_USER;

SELECT * FROM STREAM.USERS
LEFT JOIN STREAM.USERS_CONTENTS
ON STREAM.USERS.ID_USER = STREAM.USERS_CONTENTS.ID_USER
WHERE STREAM.USERS_CONTENTS.ID_CONTENT IS NULL; -- Busca usuários que não estão associados a nenhum conteúdo.

-- RIGHT JOIN
SELECT * FROM STREAM.USERS_CONTENTS
RIGHT JOIN STREAM.CONTENT
ON STREAM.USERS_CONTENTS.ID_CONTENT = STREAM.CONTENT.ID_CONTENT;

SELECT * FROM STREAM.USERS_CONTENTS
RIGHT JOIN STREAM.CONTENT
ON STREAM.USERS_CONTENTS.ID_CONTENT = STREAM.CONTENT.ID_CONTENT
WHERE STREAM.USERS_CONTENTS.ID_USER IS NULL;

-- FULL OUTER JOIN
SELECT * FROM STREAM.USERS_CONTENTS
RIGHT JOIN STREAM.CONTENT
ON STREAM.USERS_CONTENTS.ID_CONTENT = STREAM.CONTENT.ID_CONTENT
UNION
SELECT * FROM STREAM.USERS_CONTENTS
LEFT JOIN STREAM.CONTENT
ON STREAM.USERS_CONTENTS.ID_CONTENT = STREAM.CONTENT.ID_CONTENT;

SELECT * FROM STREAM.USERS_CONTENTS
RIGHT JOIN STREAM.CONTENT
ON STREAM.USERS_CONTENTS.ID_CONTENT = STREAM.CONTENT.ID_CONTENT
WHERE STREAM.USERS_CONTENTS.ID_CONTENT IS NULL OR STREAM.CONTENT.ID_CONTENT IS NULL
UNION
SELECT * FROM STREAM.USERS_CONTENTS
LEFT JOIN STREAM.CONTENT
ON STREAM.USERS_CONTENTS.ID_CONTENT = STREAM.CONTENT.ID_CONTENT
WHERE STREAM.USERS_CONTENTS.ID_CONTENT IS NULL OR STREAM.CONTENT.ID_CONTENT IS NULL;

-- COUNT
SELECT COUNT(*) FROM STREAM.USERS_CONTENTS; -- Conta quantos registros existem na tabela.

-- MAX
SELECT MAX(NOTE)
FROM STREAM.USERS_CONTENTS -- Busca o maior valor de uma coluna.
WHERE ID_CONTENT = 3;

-- MIN
SELECT MIN(NOTE)
FROM STREAM.USERS_CONTENTS; -- Busca o menor valor de uma coluna.

-- SQL ORDER BY
SELECT * FROM STREAM.CONTENT
ORDER BY ID_CONTENT DESC; -- Ordena em forma descrecente os registros por ID.

SELECT UC.TIME_STOPPED, U.NAME, C.DURATION, C.NAME FROM STREAM.USERS_CONTENTS UC
INNER JOIN STREAM.USERS U
ON UC.ID_USER = U.ID_USER
INNER JOIN STREAM.CONTENT C
ON UC.ID_CONTENT = C.ID_CONTENT
WHERE UC.TIME_STOPPED < C.DURATION; -- Busca os usuários que assistiram um conteúdo que durou menos do que o tempo de duração do mesmo.

SELECT U.ID_USER, COUNT(UC.ID) FROM STREAM.USERS_CONTENTS UC
INNER JOIN STREAM.USERS U
ON UC.ID_USER = U.ID_USER
INNER JOIN STREAM.CONTENT C
ON UC.ID_CONTENT = C.ID_CONTENT
WHERE UC.TIME_STOPPED < C.DURATION
GROUP BY U.ID_USER;